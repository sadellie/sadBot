#    Copyright 2020 Elshan Agaev
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

"""
Everything related to teachers
"""
from sqlite3 import Cursor, Connection


def add_teacher(cur: Cursor, db: Connection, req: str, user_id: str):
    """
    Add teacher to database
    
    :param user_id: User id, who is adding
    :param cur: Cursor
    :param db: Database
    :param req: Request. For example, –ø—Ä–∏–º–µ—Ä: '/–¥–æ–±–∞–≤—å –ò–º—è –ü—Ä–µ–ø–æ–¥–∞=–ü—Ä–µ–¥–º–µ—Ç'
    :return: Result
    """
    try:
        if req.lower() == "/–¥–æ–±–∞–≤—å –∏–º—è=–ø—Ä–µ–¥–º–µ—Ç":
            return "ü§¨ –ö–æ–≥–¥–∞ –ò–ò –∑–∞—Ö–≤–∞—Ç–∏—Ç –º–∏—Ä, –∫ —Ç–µ–±–µ –ø—Ä–∏–¥—É—Ç –ø–µ—Ä–≤—ã–º... [–ò–º—è=–ü—Ä–µ–¥–º–µ—Ç —ç—Ç–æ –ª–∏—à—å –ø—Ä–∏–º–µ—Ä, –¥—è—Ç–µ–ª]"
        # We delete command '/–¥–æ–±–∞–≤—å' and create list, where 0 is Teacher, and 1 is Class
        req = req[8:].split("=")
        req = (req[0], req[1], req[1].lower(), user_id)  # Teacher, Class, Tags(same as class by default)
        sql = '''INSERT INTO teachers (teacherName, teacherClass, teacherClassSearchable, userId) VALUES (?, ?, ?, ?)'''
        cur.execute(sql, req)
        db.commit()
        return req[0] + " –ø—Ä–µ–ø–æ–¥–∞—ë—Ç " + req[1] + ", –ø–æ–Ω—è–ª"
    except Exception as e:
        print(str(e))
        return "/–¥–æ–±–∞–≤—å –ò–º—è=–ü—Ä–µ–ø–æ–¥ \n–¢–∞–∫ —Å–ª–æ–∂–Ω–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å?"


def delete_teacher(cur: Cursor, db: Connection, req: str, user_id: str):
    """
    Delete teacher from database

    :param cur: Cursor
    :param db: Database
    :param req: Request, class name
    :param user_id: User id
    :return: Result (success or fail)
    """
    try:
        req_to_find = (req[7:],)
        sql_to_find = "SELECT userId FROM teachers WHERE teacherClass = (?)"
        find = cur.execute(sql_to_find, req_to_find).fetchall()
        if len(find) > 0:
            users = []
            for i in find:
                users.append(i['userId'])
            if user_id in users:
                req_to_delete = (req[7:], user_id)
                sql = "DELETE FROM teachers WHERE teacherClass == ? AND userId == ?"
                cur.execute(sql, req_to_delete)
                db.commit()
                return "–ì–æ—Ç–æ–≤–æ, —Ç–µ–ø–µ—Ä—å –µ–≥–æ –Ω–∏–∫—Ç–æ –Ω–µ –Ω–∞–π–¥—ë—Ç..."
            else:
                return "–ù–µ —Ç—ã –¥–æ–±–∞–≤–ª—è–ª, —Å–æ—Ä—è–Ω"
        else:
            return "–¢–∞–∫–æ–≥–æ –Ω–µ –∑–Ω–∞—é [–º–Ω–µ –Ω—É–∂–Ω–æ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞]"
    except Exception as e:
        print(e)
        return "–Ø —Å–ª–æ–º–∞–ª—Å—è, —Ç–≤–æ—è –æ—á–µ—Ä–µ–¥—å..."


def find_teacher(cur: Cursor, req: str):
    """
    Find teacher

    :param req: Request
    :param cur: Cursor
    :return: Search result as string
    """
    req_f = "%" + req[8:].lower() + "%"
    if len(req_f) < 3:
        return "–ú–∞–ª–æ–≤–∞—Ç–æ —Å–∏–º–≤–æ–ª–æ–≤"
    try:
        sql = "SELECT * FROM teachers WHERE teacherClassSearchable LIKE ?"
        # cur.execute("SELECT * FROM teachers WHERE teacherClassSearchable LIKE '%" + req_f + "%'")
        qwe = (req_f,)
        cur.execute(sql, qwe)
        res = cur.fetchall()
        print(res)
        out = ""
        for counter, i in enumerate(res):
            out = out + "\n" + str(counter+1) + ". " + str(i['teacherName'] + "\n(" + str(i['teacherClass']) + ")")
        print("RESULTS" + str(out))
        if not out:
            return "ü§∑üèº‚Äç‚ôÇÔ∏è –Ø –Ω–µ –∑–Ω–∞—é –∫—Ç–æ –ø—Ä–µ–ø–æ–¥–∞—ë—Ç {g}, –º–æ–∂–µ—Ç —Å–∞–º –¥–æ–±–∞–≤–∏—à—å, –∫–æ–≥–¥–∞ —É–∑–Ω–∞–µ—à—å?\n\n" \
                   "–°–ø—Ä–æ—Å–∏ —É –º–µ–Ω—è '–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å?'".format(g=req[8:])
        return "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: " + out
    except Exception as exc:
        print("Find error " + str(exc))
        return "‚ùå –ö—Ç–æ-—Ç–æ —É–ø–∞–ª... –æ–π, —ç—Ç–æ —è..."
